# Author: Sagar Rajendra Pandav
# NET-ID: srp8070

"""
This security layer inadequately handles A/B storage for files in RepyV2.
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class ABFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        # local (per object) reference to the underlying file
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'

        # make the files and add 'SE' to the readat file...
        if create:
            self.AFile = openfile(self.Afn, create)
            self.BFile = openfile(self.Bfn, create)
            if (self.Afn in listfiles()):
                self.BFile.writeat(self.AFile.readat(None, 0), 0)
            else:
                self.AFile.writeat('SE', 0)
        else:
            # Check if Backup File Present, else raise an Exception
            if (self.Afn in listfiles()):
                self.AFile = openfile(self.Afn, True)
                self.BFile = openfile(self.Bfn, True)
                self.BFile.writeat(self.AFile.readat(None, 0), 0)
            else:
                self.AFile = openfile(self.Afn, False)
                self.BFile = openfile(self.Bfn, False)

        def writeat(self, data, offset):
            if (offset > 0 and offset < len(self.BFile.readat(None, 0))):
                self.BFile.writeat(data, offset)

        def readat(self, bytes, offset):
            length = len(self.AFile.readat(None, 0))
            if (offset < 0 or length < 0):
                raise RepyArgumentError

            elif (offset >= len(self.AFile.readat(None, 0))):
                raise SeekPastEndOfFileError

            elif (bytes > length and bytes != None):
                raise SeekPastEndOfFileError

            elif (offset == 0 and bytes != None):
                raise RepyArgumentError

            else:
                # Try Reading the File else raise Exception
                try:
                    return self.AFile.readat(bytes, offset)
                except:
                    raise RepyArgumentError

        def close(self):
            aData = self.AFile.readat(None, 0)
            bData = self.BFile.readat(None, 0)
            self.AFile.close()
            self.BFile.close()

            if (bData[0] == 'S' and bData[len(bData) - 1] == 'E'):
                removefile(self.Afn)
                new_file = openfile(self.Afn, True)
                new_file.writeat(bData, 0)
                removefile(self.Bfn)
            else:
                removefile(self.Afn)
                new_file = openfile(self.Afn, True)
                new_file.writeat(aData, 0)
                removefile(self.Bfn)

        def AB_Openfile(filename, create):
            return ABFile(filename, create)

        # The code here sets up type checking and variable hiding for you.  You
        # should not need to change anything below here.
        sec_file_def = {"obj-type": ABFile,
                        "name": "ABFile",
                        "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception,
                                    "return": (int, type(None)), "target": ABFile.writeat},
                        "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)),
                                   "exceptions": Exception, "return": str, "target": ABFile.readat},
                        "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)),
                                  "target": ABFile.close}
                        }

        CHILD_CONTEXT_DEF["AB_Openfile"] = {TYPE: OBJC, ARGS: (str, bool), EXCP: Exception, RETURN: sec_file_def,
                                            TARGET: AB_Openfile}

        # Execute the user code
        secure_dispatch_module()
